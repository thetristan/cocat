// Generated by CoffeeScript 1.6.1
(function() {
  var async, compact, concat, concatFile, concatString, depth, fs, merge, padContent, padding, path, pattern, split, times, _;

  async = require('async');

  fs = require('fs');

  path = require('path');

  _ = require('underscore');

  compact = _.compact, times = _.times;

  pattern = /@import\s(?:url\()?["']([^"';]+?)["']\)?;/i;

  depth = 0;

  split = function(str) {
    return str.split("\n");
  };

  merge = function(arr) {
    return arr.join("\n");
  };

  padding = function(levels, padding) {
    if (padding == null) {
      padding = '';
    }
    times(levels, function() {
      return padding += '  ';
    });
    return padding;
  };

  padContent = function(content, levels) {
    var lines;
    if (levels == null) {
      levels = depth;
    }
    if (!content) {
      return '';
    }
    lines = split(content);
    lines = lines.map(function(line) {
      return padding(levels) + line;
    });
    return merge(lines);
  };

  concatFile = function(filename, cb) {
    filename = path.resolve(filename);
    return fs.exists(filename, function(exists) {
      if (!exists) {
        return cb(new Error("File " + filename + " doesn't exist"));
      }
      return fs.readFile(filename, 'utf8', function(err, data) {
        return concatString(data, path.dirname(filename), cb);
      });
    });
  };

  concatString = function(content, filepath, cb) {
    var checkLine, lineNumbers, lines, numLines, x;
    lines = split(content);
    numLines = lines.length - 1;
    lineNumbers = (function() {
      var _i, _results;
      _results = [];
      for (x = _i = 0; 0 <= numLines ? _i <= numLines : _i >= numLines; x = 0 <= numLines ? ++_i : --_i) {
        _results.push(x);
      }
      return _results;
    })();
    checkLine = function(lineNumber, next) {
      var file, filename, matches, _ref;
      matches = (_ref = lines[lineNumber]) != null ? _ref.match(pattern) : void 0;
      if (!matches) {
        return next();
      }
      filename = matches[1];
      if (filename.match(/^[a-z]+:/i)) {
        return next();
      }
      file = filepath + '/' + filename;
      return concatFile(file, function(err, contents) {
        var paddedContents;
        depth++;
        paddedContents = padContent(contents);
        lines[lineNumber] = "/* BEGIN \"" + filename + "\" */\n" + paddedContents + "\n/* END \"" + filename + "\" */";
        depth--;
        return next();
      });
    };
    return async.forEach(lineNumbers, checkLine, function(err) {
      lines = compact(lines);
      content = merge(lines);
      return cb(null, content);
    });
  };

  concat = function(_arg, cb) {
    var content, filename, path;
    content = _arg.content, path = _arg.path, filename = _arg.filename;
    if (content && path) {
      return concatString(content, path, cb);
    }
    if (filename) {
      return concatFile(filename, cb);
    }
    return cb(new Error("Content/path or a filename must be specified to concatenate"));
  };

  module.exports.concat = concat;

}).call(this);
